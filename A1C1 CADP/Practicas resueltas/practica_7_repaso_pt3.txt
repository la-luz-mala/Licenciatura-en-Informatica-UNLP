// 3. Una remisería dispone de información acerca de los viajes realizados durante el mes de mayo de 2020. De
// cada viaje se conoce: número de viaje, código de auto, dirección de origen, dirección de destino y
// kilómetros recorridos durante el viaje. Esta información se encuentra ordenada por código de auto y para
// un mismo código de auto pueden existir 1 o más viajes. Se pide:
// a. Informar los dos códigos de auto que más kilómetros recorrieron.
// b. Generar una lista nueva con los viajes de más de 5 kilómetros recorridos, ordenada por número de
// viaje.

Procedure maximos(l:lista);
var
    cod,codmax1,codmax2:integer;
    max1,max2,km:real;
Begin
    max1:=-1;max2:=-1; // Inicializo máximos
    codmax1:=0;codmax2:=0; // Inicializo códigos de máximos
    while(l<>nil) do begin
        cod:=l^.dato.codigo;
        km:=0; // Inicializo el contador de km
        while(l<>nil) and (l^.dato.codigo = cod) do begin
            km:= km + l^.dato.km;
            l := l^.sig;
        end;
        if (km > max1) then begin
            max2:=max1;
            codmax2:=codmax1;
            max1:=km;
            codmax1:=cod;
        end
        else if(km > max2) then begin
                max2:=km;
                codmax2:=cod;
        end;
    end;
    writeln('Los autos que recorrieron más kms son los de código ',codmax1,' y ',codmax2);
End;


// b. Generar una lista nueva con los viajes de más de 5 kilómetros recorridos,
// ordenada por número de viaje.

Procedure mayor5km(l:lista; var nueva:lista);
var
    nue,ant,actual:lista;
begin
    nueva:=nil; // Inicializo la nueva lista en nil
    while(l<>nil) do begin // Termino la ejecución cuando termina la lista L
        if(l^.dato.km>5) then begin
            new(nue); // Inicializo un nodo nuevo
            nue^.dato:=l^.dato; // Lo pueblo con la data del nodo de L
            nue^.sig:=nil; // Inicializo en nil
            actual:=nueva; // Ubico mi auxiliar en el primer nodo
            ant:=nil; // Inicializo en nil
            
            if (nueva=nil) then begin
                nueva:=nue; // Si la lista está vacía, cargo el nodo directamente
            end
            else begin // Si no está vacía: Chequeo que no se me acabe la lista y q num sea mayor
                while (actual <> nil) and (actual^.dato.num > nue^.dato.num) do begin 
                    ant:=actual; // Actualizo anterior con el valor de actual
                    actual:=actual^.sig; // Paso al sgte. nodo de "nueva"
                end;
                // Salgo del while porque se me acabó la lista o porque encontré un num menor
                if (ant=nil) then begin // El primer nodo ya es mayor?
                    nue^.sig:=nueva; // Enlazo el nodo nuevo con el primer nodo
                    nueva:=nue; // El nodo nuevo es ahora el primer nodo
                end
                else begin // Sino...
                    ant^.sig:=nue; // Enlazo el nodo anterior con el nuevo
                    nue^.sig:=actual; // Enlazo el nodo nuevo con el próximo. Si terminé con la lista, entonces actual = nil y nuevo^.sig queda en nil
                end;
            end;
        end;
        l:=l^.sig; // Avanzo en la lista principal
    end;
end;
